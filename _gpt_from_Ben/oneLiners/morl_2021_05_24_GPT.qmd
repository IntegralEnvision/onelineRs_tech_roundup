---
title: ""
subtitle: "``"
date: 2021-05-24
author: "Eben Pendleton"
format:
    html:
        df-print: kable
title-block-banner: false
image: "path/url to image"
categories: [tidyr, joins, filtering, mutates, tidyverse]
---

Indexing in R Functions

Indexing is an essential concept in programming languages. It refers to the methods used to access specific elements in a data structure, such as a vector or a dataframe. In R, it can be done using numbers, letters, boolean vectors, or ranges. This tutorial will discuss how to use indexing in R functions, including vectors and dataframes. 

Indexing Vectors

Vectors can be indexed using a range, a vector, or booleans. A range will return a subset of the vector containing the elements starting from the lower index until the higher index, inclusive of the higher index. For example, 

```
x <- c("a", "b", "c", "d", "e")
y <- x[2:4]
```
The range `2:4` returns the subset of the `x` vector from the second to the fourth element, and stores it in `y`.

A vector can also be used for indexing. For instance, 
```
x <- c("a", "b", "c", "d", "e")
y <- x[c(1, 3, 5)]
```
The vector `[1, 3, 5]` returns the subset of the `x` vector that corresponds to the first, third, and fifth element. 

Boolean vectors can also be used for indexing. For example, 
```
x <- c(2, 4, 6, 8, 10)
v <- c(FALSE, TRUE, TRUE, FALSE, TRUE)
y <- x[v]
```
The boolean vector `v` indicates which element to include, where `TRUE` means include and `FALSE` means exclude. Therefore, `y` stores the subset of `x` that corresponds to the `TRUE` elements in `v`.

Indexing Dataframes

Dataframes are queried similarly to vectors. A specific element of a dataframe can be accessed by specifying the row and column indices. For instance, 
```
df <- data.frame(x = c(1, 2, 3), y = c(4, 5, 6), z = c(7, 8, 9))
value <- df[2, 3]
```
The code above specifies the second row and third column of the `df` dataframe and stores the result in `value`. 

Moreover, a range of rows or columns can be specified using the colon `:` operator, as follows: 
```
df <- data.frame(x = c(1, 2, 3), y = c(4, 5, 6), z = c(7, 8, 9))
subset <- df[1:2, 2:3]
```
The range `1:2` specifies the first and second row of the `df` dataframe, while `2:3` specifies the second and third column. The result is stored in `subset`. 

Boolean vectors can also be used to query dataframes. For instance, 
```
df <- data.frame(x = c(1, 2, 3), y = c(4, 5, 6), z = c(7, 8, 9))
v <- c(FALSE, TRUE, FALSE)
subset <- df[v, ]
```
The boolean vector `v` specifies which row to include, where `TRUE` means include and `FALSE` means exclude. The resulting subset is stored in `subset`.

Negative Indexing

Negative indexing means dropping specific elements from the data structure. In R, negative indexing is done by adding a minus sign before the index number. For example, 
```
x <- c(1, 2, 3, 4, 5)
y <- x[-3]
```
The code above removes the third element from the `x` vector and stores the result in `y`. 

Conclusion

Indexing is a powerful tool in programming that allows users to access specific elements of a data structure. In R, indexing can be done using numbers, letters, booleans, or ranges, and it can be applied to vectors and dataframes alike. Negative indexing can also be used to drop specific elements. With these tools in hand, R users can extract and manipulate data in a variety of ways.