---
title: "Monday OneLineRs: dplyr::case_match()"
subtitle: "`case_match() and case_when() and mutate() and switch()`"
date: 2023-03-06
author: "Jonathan Zadra"
format:
    html:
        df-print: kable
title-block-banner: false
image: "path/url to image"
categories: [tidyr, joins, filtering, mutates, tidyverse]
---

Introduction to dplyr::case_match()

The `case_match()` function is a new addition to the dplyr package in version 1.1. It is designed as a vectorized version of the traditional switch() function, but it is simpler to use than `case_when()` if the value on the left side of your testing formula is the same for all tests. This OneLineRs tutorial will explain how to use `case_match()` in your R code.

Syntax of dplyr::case_match()

The syntax for using the `case_match()` function is as follows:

```
case_match(data, c(value1, value2, ...), result, default_result)
```

The parameters for `case_match()` are as follows:

* `data`: a vector of values that you want to test against
* `c(value1, value2, ...)`: a vector of possible values that you want to test for
* `result`: the output value when one of the possible values is matched
* `default_result`: the output value when none of the possible values is matched

Example Dataset

For this tutorial, let's use an example dataset with water quality measurements from a river. The dataset includes measurements for dissolved oxygen (DO), pH, and turbidity levels.

```
River_Data <- data.frame(
  DO = c(5.6, 7.1, 6.3, 4.9, 5.8),
  pH = c(7.2, 6.8, 7.5, 8.1, 7.0),
  Turbidity = c(12, 21, 18, 16, 14)
)
```

Using dplyr::case_match()

Now let's say you want to create a new variable in your River_Data dataset that categorizes the pH levels as "Low", "Moderate", or "High" based on the following criteria:

* pH < 7.0 = "Low"
* pH >= 7.0 and pH <= 7.5 = "Moderate"
* pH > 7.5 = "High"

You can use `case_match()` to create this new variable like this:

```
River_Data %>%
  mutate(pH_Category = case_match(
    pH,
    c(0, 7),
    "Low",
    c(7, 7.5),
    "Moderate",
    c(7.5, Inf),
    "High"
  ))
```

Explanation:

* We use the `mutate()` function from the dplyr package to create a new variable in our dataset called "pH_Category"
* We use `case_match()` to test for the different categories of pH levels
* We specify the vector of values we want to test against, which is the "pH" variable in our dataset
* We then specify the different possible tests we want to run using `c(value1, value2, ...)`
* If one of the tests is matched, the corresponding result is returned

In this case, if the pH value is less than 7 or greater than 7.5, then the corresponding result of "Low" or "High" is returned. If the pH value falls between 7 and 7.5, then "Moderate" is returned.

Conclusion

In conclusion, the `case_match()` function is a useful tool for testing multiple values against a vector to return corresponding results. It is simpler than using `case_when()` if the value on the left side of your testing formula is the same for all tests. This tutorial has shown how to use `case_match()` with an example water quality dataset to categorize pH levels into low, moderate, and high categories.