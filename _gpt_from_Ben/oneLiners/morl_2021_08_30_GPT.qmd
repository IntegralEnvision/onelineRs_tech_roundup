---
title: ""
subtitle: "`seq()`"
date: 2021-08-30
author: "Eben Pendleton"
format:
    html:
        df-print: kable
title-block-banner: false
image: "path/url to image"
categories: [tidyr, joins, filtering, mutates, tidyverse]
---

Introduction 

In R, we use the `seq()` function to generate a sequence of numbers. This function takes either integers or decimal numbers and returns a vector of consecutive numbers between a given starting point and an end point. The sequence function has four versions, while the most basic one is the “from-to” version. The seq function is flexible, providing several ways to specify the range of values, such as the by parameter, the length.out parameter, and the along.with parameter. In this tutorial, we will explore these parameters in more detail. 

Generating Sequence

The most basic version of the `seq()` function takes a start and end value, and generates a sequence of numbers between the two values. The syntax for this version is : 

`seq(from, to)`

For example, to generate the sequence of integers from 1 through 10, we can write: 

`seq(1, 10)`

By Parameter

Another way to specify the length of the sequence generated by seq is to use the by parameter. 

`seq(from, to, by)`

It specifies the interval or step between numbers. With this parameter, we can generate a sequence with specific increments between values. For example, to generate a sequence of even numbers between 1 and 10, we can write:

`seq(2, 10, by=2)`

This code will generate the sequence 2, 4, 6, 8 and 10. 


Length.out Parameter

The length.out parameter allows us to specify a desired sequence length, as opposed to a step-size for our sequence. The length.out value must be an integer. 

`seq(from, to, length.out)`

For example, if we wanted to generate a sequence of 15 numbers between 1 and 10000, we can write:

`seq(1, 10000, length.out = 15)`

This code will generate a sequence of 15 evenly spaced numbers between 1 and 10,000. 

Along.with Parameter

The along.with parameter allows us to specify a desired length equal to the length of the argument passed. Here's is creating an input vector of length 5:

`x<-c("yes","no","maybe","sometimes","always")`

Now, to generate a sequence equal to the length of x, we can write: 

`seq(along.with=x)`

This code will generate a sequence of 1, 2, 3, 4 and 5. 

Conclusion

The `seq()` function in R is an excellent tool for generating sequences of numbers with different configurations. The sequence can be generated by specifying the start and end points, and specifying the number of steps between the start and end points. Alternatively, we can also specify the sequence's desired length by using the length.out parameter, or equal to the length of an input vector by using the along.with function. The use of these functions is a powerful and flexible tool for writing code in R. 



### Example Dataset 

Let's create a dataset on Water Quality to demonstrate how to use the 'seq()' function to generate a sequence of numbers. We start by creating two vectors 'ph' and 'temperature' to store values of ph levels and temperature. 

```R

# Creating a vector for Ph values 
ph <- seq(5,9, by=0.5)

# Creating a vector for temperature 
temperature <- seq(20,30,by=2)

```

These vectors give us consecutive ph values and temperatures for water quality analysis. We can use these vectors to explore potential relationships between water temperature and the ph levels in water samples.